{"version":3,"sources":["en-de-code.js","config.js","App.js","index.js"],"names":["aesjs","require","key","module","exports","encrypt","text","textBytes","utils","utf8","toBytes","encryptedBytes","ModeOfOperation","ctr","Counter","encryptedHex","hex","fromBytes","console","log","decrypt","decryptText","decryptedBytes","decryptedText","domain","goto","window","open","App","react_default","a","createElement","className","onClick","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"4EAAA,IAAMA,EAAQC,EAAQ,IAEhBC,EAAM,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IA6BjEC,EAAOC,QAAU,CACbC,QA5BY,SAACC,GAEb,IAAMC,EAAYP,EAAMQ,MAAMC,KAAKC,QAAQJ,GAIrCK,EADS,IAAIX,EAAMY,gBAAgBC,IAAIX,EAAK,IAAIF,EAAMc,QAAQ,IACtCT,QAAQE,GAGhCQ,EAAef,EAAMQ,MAAMQ,IAAIC,UAAUN,GAE/C,OADAO,QAAQC,IAAIJ,GACLA,GAkBPK,QAhBY,SAACC,GACb,IAAIV,EAAiBX,EAAMQ,MAAMQ,IAAIN,QAAQW,GAKzCC,EADS,IAAItB,EAAMY,gBAAgBC,IAAIX,EAAK,IAAIF,EAAMc,QAAQ,IACtCM,QAAQT,GAGhCY,EAAgBvB,EAAMQ,MAAMC,KAAKQ,UAAUK,GAE/C,OADAJ,QAAQC,IAAII,GACLA,mBC5BXpB,EAAOC,QAAU,CACboB,OAAQ,iNCINC,EAAO,WACTC,OAAOC,KAAKP,kBAAQI,YAGT,SAASI,IACtB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,QAASC,QAASR,KCPxC,IAAMS,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACPT,EAAAC,EAAAC,cAACF,EAAAC,EAAMS,WAAP,KACEV,EAAAC,EAAAC,cAACH,EAAD,OAEFM","file":"static/js/main.c8c39aae.chunk.js","sourcesContent":["const aesjs = require(\"aes-js\");\r\n\r\nconst key = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 ];\r\n\r\nconst encrypt = (text) => {\r\n// Convert text to bytes\r\n    const textBytes = aesjs.utils.utf8.toBytes(text);\r\n\r\n// The counter is optional, and if omitted will begin at 1\r\n    const aesCtr = new aesjs.ModeOfOperation.ctr(key, new aesjs.Counter(5));\r\n    const encryptedBytes = aesCtr.encrypt(textBytes);\r\n\r\n// To print or store the binary data, you may convert it to hex\r\n    const encryptedHex = aesjs.utils.hex.fromBytes(encryptedBytes);\r\n    console.log(encryptedHex);\r\n    return encryptedHex;\r\n}\r\nconst decrypt = (decryptText) => {\r\n    var encryptedBytes = aesjs.utils.hex.toBytes(decryptText);\r\n\r\n// The counter mode of operation maintains internal state, so to\r\n// decrypt a new instance must be instantiated.\r\n    var aesCtr = new aesjs.ModeOfOperation.ctr(key, new aesjs.Counter(5));\r\n    var decryptedBytes = aesCtr.decrypt(encryptedBytes);\r\n\r\n// Convert our bytes back into text\r\n    var decryptedText = aesjs.utils.utf8.fromBytes(decryptedBytes);\r\n    console.log(decryptedText);\r\n    return decryptedText;\r\n}\r\n\r\nmodule.exports = {\r\n    encrypt,\r\n    decrypt\r\n}\r\n","module.exports = {\n    domain: '9f29e1a79d0c96cca74fda4280311e89d7c5b59239bb636b56bfd0',\n}","import React from \"react\";\nimport \"./styles.css\";\nimport {decrypt} from './en-de-code';\nimport {domain} from './config'\n\nconst goto = () => {\n    window.open(decrypt(domain))\n};\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <div className={'joker'} onClick={goto} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}