{"version":3,"sources":["utils.js","config","App.js","index.js"],"names":["aesjs","require","key","module","exports","encrypt","text","textBytes","utils","utf8","toBytes","encryptedBytes","ModeOfOperation","ctr","Counter","encryptedHex","hex","fromBytes","console","log","decrypt","decryptText","decryptedBytes","decryptedText","__webpack_require__","p","goto","window","open","address","App","react_default","a","createElement","className","onClick","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"4EAAA,IAAMA,EAAQC,EAAQ,IAEhBC,EAAM,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IA6BjEC,EAAOC,QAAU,CACbC,QA5BY,SAACC,GAEb,IAAMC,EAAYP,EAAMQ,MAAMC,KAAKC,QAAQJ,GAIrCK,EADS,IAAIX,EAAMY,gBAAgBC,IAAIX,EAAK,IAAIF,EAAMc,QAAQ,IACtCT,QAAQE,GAGhCQ,EAAef,EAAMQ,MAAMQ,IAAIC,UAAUN,GAE/C,OADAO,QAAQC,IAAIJ,GACLA,GAkBPK,QAhBY,SAACC,GACb,IAAIV,EAAiBX,EAAMQ,MAAMQ,IAAIN,QAAQW,GAKzCC,EADS,IAAItB,EAAMY,gBAAgBC,IAAIX,EAAK,IAAIF,EAAMc,QAAQ,IACtCM,QAAQT,GAGhCY,EAAgBvB,EAAMQ,MAAMC,KAAKQ,UAAUK,GAE/C,OADAJ,QAAQC,IAAII,GACLA,qBC5BXpB,EAAAC,QAAiBoB,EAAAC,EAAuB,0LCKlCC,EAAO,WACTC,OAAOC,KAAKR,kBAAQS,aAGT,SAASC,IACtB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,QAASC,QAAST,KCPxC,IAAMU,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACPT,EAAAC,EAAAC,cAACF,EAAAC,EAAMS,WAAP,KACEV,EAAAC,EAAAC,cAACH,EAAD,OAEFM","file":"static/js/main.3717bbf3.chunk.js","sourcesContent":["const aesjs = require(\"aes-js\");\n\nconst key = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 ];\n\nconst encrypt = (text) => {\n// Convert text to bytes\n    const textBytes = aesjs.utils.utf8.toBytes(text);\n\n// The counter is optional, and if omitted will begin at 1\n    const aesCtr = new aesjs.ModeOfOperation.ctr(key, new aesjs.Counter(5));\n    const encryptedBytes = aesCtr.encrypt(textBytes);\n\n// To print or store the binary data, you may convert it to hex\n    const encryptedHex = aesjs.utils.hex.fromBytes(encryptedBytes);\n    console.log(encryptedHex);\n    return encryptedHex;\n}\nconst decrypt = (decryptText) => {\n    var encryptedBytes = aesjs.utils.hex.toBytes(decryptText);\n\n// The counter mode of operation maintains internal state, so to\n// decrypt a new instance must be instantiated.\n    var aesCtr = new aesjs.ModeOfOperation.ctr(key, new aesjs.Counter(5));\n    var decryptedBytes = aesCtr.decrypt(encryptedBytes);\n\n// Convert our bytes back into text\n    var decryptedText = aesjs.utils.utf8.fromBytes(decryptedBytes);\n    console.log(decryptedText);\n    return decryptedText;\n}\n\nmodule.exports = {\n    encrypt,\n    decrypt\n}\n","module.exports = __webpack_public_path__ + \"static/media/config.68b18c0b.bin\";","import React from \"react\";\nimport \"./styles.css\";\nimport {decrypt} from './utils';\nimport {address} from './config'\n\nconst goto = () => {\n    window.open(decrypt(address))\n};\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <div className={'joker'} onClick={goto} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}